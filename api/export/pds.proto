syntax = "proto3";
option go_package = "github.com/schwarzlichtbezirk/pds/pb";

package pds;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// Check up service health.
service ToolGuide {
	// Returns time when this message was received.
	rpc Ping (google.protobuf.Empty) returns (google.protobuf.Timestamp) {
		option (google.api.http) = {
			post: "/api/tool/ping"
		};
	}
	// Returns message content itself.
	rpc Echo (pds.EchoContent) returns (pds.EchoContent) {
		option (google.api.http) = {
			post: "/api/tool/echo"
			body: "*"
			additional_bindings: {
				post: "/api/tool/echo/{value}"
			}
		};
	}
}

// Echo message content.
message EchoContent {
	bytes value = 1;
}

// Interface with port functionality.
service PortGuide {
	// Accepts a stream of Ports and adds them to map.
	rpc RecordList (stream pds.Port) returns (pds.Summary) {}

	// Stores Port to map and return associated key.
	rpc SetByKey (pds.Port) returns (pds.Key) {
		option (google.api.http) = {
			post: "/api/port/set"
			body: "*"
		};
	}
	// Returns Port by associated key.
	rpc GetByKey (pds.Key) returns (pds.Port) {
		option (google.api.http) = {
			post: "/api/port/get"
			body: "*"
		};
	}
	// Returns Port by associated name.
	rpc GetByName (pds.Name) returns (pds.Port) {
		option (google.api.http) = {
			post: "/api/port/name"
			body: "*"
		};
	}
	// Finds nearest Port to given coordinates.
	rpc FindNearest (pds.Point) returns (pds.Port) {
		option (google.api.http) = {
			post: "/api/port/near"
			body: "*"
		};
	}
	// Finds all ports in given circle.
	rpc FindInCircle (pds.Circle) returns (pds.Ports) {
		option (google.api.http) = {
			post: "/api/port/circle"
			body: "*"
		};
	}
	// Finds all ports each of which contains given text
	// in one of the fields: name, city, province, country.
	rpc FindText (pds.Quest) returns (pds.Ports) {
		option (google.api.http) = {
			post: "/api/port/text"
			body: "*"
		};
	}
}

// Port description.
message Port {
	string name = 1;
	string city = 2;
	string country = 3;
	repeated string alias = 4;
	repeated string regions = 5;
	repeated float coordinates = 6;
	string province = 7;
	string timezone = 8;
	repeated string unlocs = 9;
	string code = 10;
}

// Summary result of ports streaming.
message Summary {
	// The number of ports received.
	int32 port_count = 1;
	// The duration of the traversal in milliseconds.
	int32 elapsed_time = 2;
}

// Port key.
message Key {
	string value = 1;
}

// Port name.
message Name {
	string value = 1;
}

// Quest with text to find in object fields.
message Quest {
	string value = 1;
	bool sensitive = 2;
	bool whole = 3;
}

// Point with geo coordinates as latitude-longitude pair.
message Point {
	float latitude = 1;
	float longitude = 2;
}

// Circle with center at given Point, and radius in meters.
message Circle {
	Point center = 1;
	float radius = 2;
}

// List on founded ports for given condition.
message Ports {
	repeated Port list = 1;
}
